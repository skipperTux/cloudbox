#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail
# set -o xtrace

# Set magic variables for current file & dir
__dir=`dirname "$(readlink -f "$0")"`
__file="${__dir}/$(basename "${BASH_SOURCE[0]}")"
__base="$(basename ${__file} .sh)"
__bin="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Set variables
build=false
force=false
exec=false
unset start
container_alias='podman'
docker_name='docker'

# https://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash/39398359#39398359
# As long as there is at least one more argument, keep looping
while [[ $# -gt 0 ]]; do
    key="$1"
    case "${key}" in
        # This is a flag type option. Will catch either -b or --build
        -b|--build)
        build=true
        ;;
        # This is a flag type option. Will catch either -f or --force
        -f|--force)
        force=true
        ;;
        # This is a flag type option. Will catch either -d or --docker
        -d|--docker)
        container_alias="${docker_name}"
        ;;
        # This is an arg value type option. Will catch -e value or --exec value
        -e|--exec)
        exec=true
        shift # past the key and to the value
        command="$1"
        ;;
        # This is an arg=value type option. Will catch -e=value or --exec=value
        -e=*|--exec=*)
        # No need to shift here since the value is part of the same string
        exec=true
        command="${key#*=}"
        ;;
        *)
        # Do whatever you want with extra options
        echo "Unknown option '${key}'"
        ;;
    esac
    shift
done

# Set cloudbox environment
export CLOUDBOX_USER='cloudbox'
export CLOUDBOX_HOME="/home/${CLOUDBOX_USER}"
export CLOUDBOX_SSH="${CLOUDBOX_HOME}/.ssh"
export CLOUDBOX_HOST_SSH="${CLOUDBOX_HOME}/host_ssh"
export CLOUDBOX_WORKDIR="${CLOUDBOX_HOME}/Projects"
export CLOUDBOX_NAME='cloudbox'
export CLOUDBOX_VERSION='0.2.3'

VOLUME_NAME=${CLOUDBOX_USER}'_home'
DOCKER_TAG='local'/${CLOUDBOX_NAME}:${CLOUDBOX_VERSION}

# Set local environment
if [ $UID -ne 0 ]; then
    LOCAL_HOME=${HOME}
else
    LOCAL_HOME="$(getent passwd ${SUDO_USER} | cut -d: -f6)"
fi
LOCAL_SSH="${LOCAL_HOME}/.ssh"
LOCAL_WORKDIR="${LOCAL_HOME}/Projects"

# Script prerequisites
if  [ "${container_alias}" = "${docker_name}" ]; then
    user_in_docker=$(id --name --groups --zero "${USER:-${USERNAME:-${LOGNAME}}}" | grep -c --null-data --line-regexp --fixed-strings "${docker_name}" || [[ $? == 1 ]])
    if [ ${UID} -ne 0 ] && ! [ "${user_in_docker}" = "1" ]; then
        echo "use: sudo ${0##*/}"
        exit -1
    fi
fi

if [ "${exec:-}" = "true" ]; then
    if ${container_alias} start ${CLOUDBOX_NAME} 2>/dev/null; then
        start=false
    else
        start=true
    fi
fi

# functions

local_workdirs () {
    # Create local working directories and files
    if  [ "${container_alias}" = "${docker_name}" ]; then
        sudo -H -u ${SUDO_USER} mkdir -p ${LOCAL_WORKDIR}
        sudo -H -u ${SUDO_USER} mkdir -p ${LOCAL_SSH}
    else
        mkdir -p ${LOCAL_WORKDIR}
        mkdir -p ${LOCAL_SSH}
    fi
}

container_build () {
    # Build cloudbox image
    local args
    pushd ${__dir}
    args=('--rm=true'
        "--build-arg=\"CLOUDBOX_USER=${CLOUDBOX_USER}\""
        "--build-arg=\"CLOUDBOX_SSH=${CLOUDBOX_SSH}\""
        "--build-arg=\"CLOUDBOX_HOST_SSH=${CLOUDBOX_HOST_SSH}\""
        "--build-arg=\"CLOUDBOX_WORKDIR=${CLOUDBOX_WORKDIR}\""
        "--build-arg=\"CLOUDBOX_NAME=${CLOUDBOX_NAME}\""
        "--build-arg=\"CLOUDBOX_VERSION=${CLOUDBOX_VERSION}\""
        "--build-arg=\"BUILD_DATE=$(date --utc +\"%FT%TZ\")\"")
    [ "${force:-}" = "true" ] && args+=('--no-cache')
    args+=("--tag='"${DOCKER_TAG}"'" '.')
    eval ${container_alias} build ${args[@]}
    popd
}

container_run () {
    # Run cloudbox container
    local args
    if [ "${exec:-}" = "true" ]; then
        args=('--detach')
    else
        args=('--interactive' '--tty' '--rm=true')
    fi

    args+=("--mount type=bind,source=\"${LOCAL_SSH}\",target=\"${CLOUDBOX_HOST_SSH}\",relabel=shared,ro=true"
        "--mount type=bind,source=\"${LOCAL_WORKDIR}\",target=\"${CLOUDBOX_WORKDIR}\",relabel=shared"
        "--mount type=volume,source=\"${VOLUME_NAME}\",target=\"${CLOUDBOX_HOME}\"")
    args+=('--userns=keep-id')

    if [ "${PWD:0:${#LOCAL_WORKDIR}}" = "${LOCAL_WORKDIR}" ]; then
        subfolder=${PWD#${LOCAL_WORKDIR}/}
        if [ "${subfolder}" != "${LOCAL_WORKDIR}" ]; then
          args+=("--workdir \"${CLOUDBOX_WORKDIR}/${subfolder}\"")
        fi
    fi

    if [ "${exec:-}" = "true" ]; then
        args+=("--name ${CLOUDBOX_NAME}")
        args+=("${DOCKER_TAG}" 'tail -f /dev/null')
    else
        args+=("${DOCKER_TAG}" '/bin/bash')
    fi

    eval ${container_alias} run ${args[@]}
}

container_exec () {
    local args
    args=('--interactive' '--tty')
    args+=("${CLOUDBOX_NAME}" "${command}")

    eval ${container_alias} exec ${args[@]}
}


# main script
if [ "${start:-}" != "false" ]; then
    local_workdirs
fi

if [ "${build:-}" = "true" ]; then
    container_build
fi

if [ "${start:-}" = "true" ] || [ "${exec:-}" = "false" ]; then
    container_run
fi

if [ "${exec:-}" = "true" ]; then
    container_exec
fi